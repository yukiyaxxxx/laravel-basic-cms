<?php

namespace Tests\Feature\Services\Article;

use App\Models\Article\Article;
use App\Services\Article\ArticleService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ArticleServiceTest extends TestCase
{
    use RefreshDatabase;

    protected $service;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->service = app()->make(ArticleService::class);
    }

    /**
     * 新規作成 のテスト
     */
    public function testCreate()
    {
        $values = [
            'category_id' => 10,
            'title'       => 'タイトル',
            'body'        => '本文',
            'date'        => '2020-05-01 12:00:00',
            'is_publish'  => 1
        ];

        $article = $this->service->create($values);

        $this->assertEquals(10, $article->category_id);
        $this->assertEquals('タイトル', $article->title);
        $this->assertEquals('本文', $article->body);
        $this->assertEquals('2020-05-01 12:00:00', $article->date);
        $this->assertEquals(1, $article->is_publish);
    }

    /**
     * 更新のテスト
     */
    public function testUpdate()
    {
        $article = Article::create([
            'category_id' => 10,
            'title'       => 'タイトル',
            'body'        => '本文',
            'date'        => '2020-05-01 12:00:00',
            'is_publish'  => 1
        ]);


        $values = [
            'category_id' => 12,
            'title'       => 'タイトル2',
            'body'        => '本文2',
            'date'        => '2020-05-01 14:00:00',
            'is_publish'  => 0
        ];

        $article = $this->service->update($article, $values);

        $this->assertEquals(12, $article->category_id);
        $this->assertEquals('タイトル2', $article->title);
        $this->assertEquals('本文2', $article->body);
        $this->assertEquals('2020-05-01 14:00:00', $article->date);
        $this->assertEquals(0, $article->is_publish);
    }

}
