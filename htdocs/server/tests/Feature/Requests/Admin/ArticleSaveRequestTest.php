<?php

namespace Tests\Feature\Requests\Admin;

use App\Http\Requests\Admin\ArticleSaveRequest;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ArticleSaveRequestTest extends TestCase
{

    protected $placeholder;
    protected $request;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->placeholder = [
            'category_id' => 10,
            'title'       => 'タイトル',
            'body'        => '本文',
            'date'        => '2020-05-01 12:00:00',
            'is_publish'  => 1,
        ];

        $this->request = new ArticleSaveRequest();
    }

    /**
     * 通過
     */
    public function testArticleSaveRequestSuccess()
    {
        $this->request->merge($this->placeholder);

        $validator = \Validator::make($this->request->all(), $this->request->rules());

        // dump($validator->errors());

        $result = $validator->passes();
        $this->assertTrue($result);
    }


    /**
     * @param $data
     * @param $expected
     * @dataProvider dataProviderArticleSaveRequestCategoryId
     */
    public function testArticleSaveRequestCategoryId($data, $expected)
    {
        $column = 'category_id';
        $this->placeholder[$column] = $data;
        $this->request->merge($this->placeholder);

        $validator = \Validator::make($this->request->all(), $this->request->rules());

        // dump($validator->errors());

        $result = $validator->passes();
        $this->assertEquals($expected, $result);
    }

    public function dataProviderArticleSaveRequestCategoryId()
    {
        return [
            'null'        => [null, false],
            'null_string' => ['', false],
            'a'           => ['a', false],
            '1'           => ['1', true],
        ];
    }

    /**
     * @param $data
     * @param $expected
     * @dataProvider dataProviderArticleSaveRequestTitle
     */
    public function testArticleSaveRequestTitle($data, $expected)
    {
        $column = 'title';
        $this->placeholder[$column] = $data;
        $this->request->merge($this->placeholder);

        $validator = \Validator::make($this->request->all(), $this->request->rules());

        // dump($validator->errors());

        $result = $validator->passes();
        $this->assertEquals($expected, $result);
    }

    public function dataProviderArticleSaveRequestTitle()
    {
        return [
            'null'        => [null, false],
            'null_string' => ['', false],
            'a'           => ['a', true],
            'ax179'       => [str_repeat('a', 179), true],
            'ax180'       => [str_repeat('a', 180), true],
            'ax181'       => [str_repeat('a', 181), false],
        ];
    }


    /**
     * @param $data
     * @param $expected
     * @dataProvider dataProviderArticleSaveRequestBody
     */
    public function testArticleSaveRequestBody($data, $expected)
    {
        $column = 'body';
        $this->placeholder[$column] = $data;
        $this->request->merge($this->placeholder);

        $validator = \Validator::make($this->request->all(), $this->request->rules());

        // dump($validator->errors());

        $result = $validator->passes();
        $this->assertEquals($expected, $result);
    }

    public function dataProviderArticleSaveRequestBody()
    {
        return [
            'null'        => [null, false],
            'null_string' => ['', false],
            'a'           => ['a', true],
            'ax9999'      => [str_repeat('a', 9999), true],
            'ax10000'     => [str_repeat('a', 10000), true],
            'ax10001'     => [str_repeat('a', 10001), false],
        ];
    }


    /**
     * @param $data
     * @param $expected
     * @dataProvider dataProviderArticleSaveRequestDate
     */
    public function testArticleSaveRequestDate($data, $expected)
    {
        $column = 'date';
        $this->placeholder[$column] = $data;
        $this->request->merge($this->placeholder);

        $validator = \Validator::make($this->request->all(), $this->request->rules());

        // dump($validator->errors());

        $result = $validator->passes();
        $this->assertEquals($expected, $result);
    }

    public function dataProviderArticleSaveRequestDate()
    {
        return [
            'null'                => [null, false],
            'null_string'         => ['', false],
            'a'                   => ['a', false],
            '2020-12-01 12:00:00' => ['2020-12-01 12:00:00', true],
        ];
    }


    /**
     * @param $data
     * @param $expected
     * @dataProvider dataProviderArticleSaveRequestIsPublish
     */
    public function testArticleSaveRequestIsPublish($data, $expected)
    {
        $column = 'is_publish';
        $this->placeholder[$column] = $data;
        $this->request->merge($this->placeholder);

        $validator = \Validator::make($this->request->all(), $this->request->rules());

        // dump($validator->errors());

        $result = $validator->passes();
        $this->assertEquals($expected, $result);
    }

    public function dataProviderArticleSaveRequestIsPublish()
    {
        return [
            'null'        => [null, false],
            'null_string' => ['', false],
            'a'           => ['a', false],
            '0'           => ['0', true],
            '1'           => ['1', true],
        ];
    }


}
