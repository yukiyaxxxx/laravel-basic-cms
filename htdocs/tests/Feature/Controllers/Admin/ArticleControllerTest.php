<?php

namespace Tests\Feature\Controllers\Admin;

use App\Models\Article\Article;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ArticleControllerTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = new User();
        $user->email = 'test@example.com';
        $user->password = \Hash::make('1234');
        $user->save();

        $this->user = $user;
    }

    public function testList()
    {
        $response = $this->get(route('admin.article.list'));
        $response->assertRedirect(route('login'));

        $this->actingAs($this->user);
        $response = $this->get(route('admin.article.list'));
        $response->assertStatus(200);
    }

    public function testCreate()
    {
        $response = $this->get(route('admin.article.create'));
        $response->assertRedirect(route('login'));

        $this->actingAs($this->user);
        $response = $this->get(route('admin.article.create'));
        $response->assertStatus(200);
        $response->assertSee(route('admin.article.store'));
    }

    public function testStore()
    {
        $params = [
            'category_id' => 10,
            'title'       => 'タイトル',
            'body'        => '本文',
            'date'        => '2020-05-01 12:00:00',
            'is_publish'  => 1,
        ];

        $response = $this->post(route('admin.article.store'), $params);
        $response->assertRedirect(route('login'));

        $this->actingAs($this->user);
        $response = $this->post(route('admin.article.store'), $params);

        $article = Article::first();

        $response->assertRedirect(route('admin.article.edit', ['article' => $article->id]));

        $this->assertEquals(10, $article->category_id);
        $this->assertEquals('タイトル', $article->title);
        $this->assertEquals('本文', $article->body);
        $this->assertEquals('2020-05-01 12:00:00', $article->date);
        $this->assertEquals(1, $article->is_publish);
    }


    public function testEdit()
    {
        $article = Article::create([
            'category_id' => 10,
            'title'       => 'タイトル',
            'body'        => '本文',
            'date'        => '2020-05-01 12:00:00',
            'is_publish'  => 1,
        ]);

        $response = $this->get(route('admin.article.edit', ['article' => $article->id]));
        $response->assertRedirect(route('login'));

        $this->actingAs($this->user);
        $response = $this->get(route('admin.article.edit', ['article' => $article->id]));
        $response->assertStatus(200);
        $response->assertSee(route('admin.article.update', ['article' => $article->id]));
    }


    public function testUpdate()
    {
        $article = Article::create([
            'category_id' => 10,
            'title'       => 'タイトル',
            'body'        => '本文',
            'date'        => '2020-05-01 12:00:00',
            'is_publish'  => 1,
        ]);

        $params = [
            'category_id' => 11,
            'title'       => 'タイトル2',
            'body'        => '本文2',
            'date'        => '2020-05-01 12:00:02',
            'is_publish'  => 0,
        ];

        $response = $this->post(route('admin.article.update', ['article' => $article->id]), $params);
        $response->assertRedirect(route('login'));

        $this->actingAs($this->user);
        $response = $this->post(route('admin.article.update', ['article' => $article->id]), $params);

        $response->assertRedirect(route('admin.article.edit', ['article' => $article->id]));

        $article->refresh();

        $this->assertEquals(11, $article->category_id);
        $this->assertEquals('タイトル2', $article->title);
        $this->assertEquals('本文2', $article->body);
        $this->assertEquals('2020-05-01 12:00:02', $article->date);
        $this->assertEquals(0, $article->is_publish);
    }


    public function testDestroy()
    {
        $article = Article::create([
            'category_id' => 10,
            'title'       => 'タイトル',
            'body'        => '本文',
            'date'        => '2020-05-01 12:00:00',
            'is_publish'  => 1,
        ]);

        $response = $this->post(route('admin.article.destroy', ['article' => $article->id]));
        $response->assertRedirect(route('login'));

        $this->actingAs($this->user);

        $response = $this->post(route('admin.article.destroy', ['article' => $article->id]));
        $response->assertRedirect(route('admin.article.list'));

        $this->assertNull(Article::find($article->id));
    }

}
